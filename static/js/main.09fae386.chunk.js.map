{"version":3,"sources":["constants.js","util/NamingUtils.js","objects/Scale.js","components/Diagram.js","components/ScaleDiagram.js","util/TheoryUtils.ts","logic/ChordDiagramLogic.ts","pages/ScaleExplorer.js","App.js","reportWebVitals.js","index.js"],"names":["SCALE_FAMILIES","name","intervals","modes","CHORD_TYPES","NOTES","names","STANDARD_TUNING","getChordName","notes","current","naming","lastIndex","i","length","next","value","ext","extensions","seventh","getNameFromMap","res","semitones","getSemitonesBetweenNotes","push","getIntervalsBetweenNotesOfChord","a","b","Scale","root","family","offset","this","init","nts","Number","j","index","startIndex","indices","noots","getNote","type","result","getChord","margin","fretHeight","stringOffset","title","fontWeight","subtext","line","strokeWidth","nut","circle","Diagram","data","k","chordData","fingering","Object","values","lines","x","x1","x2","y1","y2","style","_generateLines","frets","_generateFrets","lowestString","highestString","forEach","e","fingerPlacement","chord","nutLocation","y","position","r","cx","cy","symbol","width","height","textAnchor","_generateChordDisplay","className","viewBox","fretheight","fill","rootCircle","stroke","halfnut","ScaleDiagram","ommits","tuning","fretsDisplayed","generateLines","dots","string","base","stringCount","fret","note","includes","indexOf","generateDots","numbers","n","generateNumbers","getNoteOnString","getDiagramsForChord","options","allowInversions","mutedMustBeConnected","maxMutedCount","mutedNotInCenter","possibleIndices","getFretBoardPositionsOfChord","fingerings","set","Set","add","recursivelyGetBlock","element","removeDuplicates","filter","validateFingering","array","val","v","str","has","possibleIndicesPerString","currentString","startFret","currentSet","possibilities","currentPossibilities","currentStringNotes","possibleIndex","clone","entry","chordNotes","fingers","muted","bassFound","bassIsRoot","mutedAreConnected","allNotes","left","right","presets","mode","ScaleExplorer","useState","scale","setScale","setFamily","setRoot","setMode","setOmmits","triads","setTriads","sevenths","setSevenths","ninths","setNinths","diagrams","setDiagrams","getDiagrams","d","console","log","useEffect","s","updateScale","getChordsOfType","onChange","target","map","selected","fam","onClick","o","splice","toggleOmmit","preset","applyPreset","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.09fae386.chunk.js","sourcesContent":["export const SCALE_FAMILIES = [\r\n    {name:\"Major\", intervals:[2,2,1,2,2,2,1], modes:[\"Major/Ionian\", \"Dorian\", \"Phrygian\", \"Lydian\", \"Mixolydian\", \"Natural Minor/Aeolian\", \"Locrian\"]},\r\n    {name:\"Melodic Minor\", intervals:[2,1,2,2,2,2,1], modes:[\"Melodic Minor\", \"Dorian b2\", \"Lydian Aug.\", \"Lydian dom.\", \"Aeo. dom.\", \"Half diminished\", \"Alt.\"]},\r\n    {name:\"Harmonic Minor\", intervals:[2,1,2,2,1,3,1], modes:[\"Harmonic Minor\", \"Locrian nat. 6\", \"Major #5\", \"Doroam #4\", \"Phrygian dom.\", \"Lydian #2\", \"Alt. dom. bb7\"]},\r\n    {name:\"Harmonic Major\", intervals:[2,2,1,2,1,3,1], modes:[\"Harmonic Major\", \"Dorian b5\", \"Phrygian b4\", \"Lydian b3\", \"Mixo. b2\", \"Lydian Augmented #2\", \"Locrian bb7\"]},\r\n    {name:\"Diminished\", intervals:[2,1,2,1,2,1,2,1], modes:[\"Diminished\", \"Inverted Diminished\"]},\r\n    {name:\"Whole Tone\", intervals:[2,2,2,2,2,2], modes:[\"Whole Tone\"]},\r\n    {name:\"Augmented\", intervals:[3,1,3,1,3,1], modes:[\"Augmented\", \"Inverted Augmented\"]}\r\n]\r\n\r\nexport const CHORD_TYPES = {\r\n    triad:[0,2,4],\r\n    seventh:[0,2,4,6],\r\n    ninth:[0,2,4,6,8]\r\n}\r\n\r\nexport const NOTES = [\r\n    {names: [\"A\"]},\r\n    {names: [\"A#\", \"Bb\"]},\r\n    {names: [\"B\", \"Cb\"]},\r\n    {names: [\"C\", \"B#\"]},\r\n    {names: [\"C#\", \"Db\"]},\r\n    {names: [\"D\"]},\r\n    {names: [\"D#\", \"Eb\"]},\r\n    {names: [\"E\", \"Fb\"]},\r\n    {names: [\"F\", \"E#\"]},\r\n    {names: [\"F#\", \"Gb\"]},\r\n    {names: [\"G\"]},\r\n    {names: [\"G#\", \"Ab\"]}\r\n]\r\n\r\nexport const STANDARD_TUNING = [7, 0, 5, 10, 2, 7];","import naming from \"../json/naming.json\";\r\nimport extensions from \"../json/extensions.json\";\r\n\r\nexport function getChordName(notes) {\r\n    let intervals = getIntervalsBetweenNotesOfChord(notes);\r\n    return getNameFromMap(intervals);\r\n}\r\n\r\nfunction getSemitonesBetweenNotes(a, b) {\r\n    if(a < b) {\r\n        return b - a;\r\n    } else {\r\n        return b + (12 - a);\r\n    }\r\n}\r\n\r\nfunction getIntervalsBetweenNotesOfChord(notes) {\r\n    let res = [];\r\n    for (let i = 1; i < notes.length; i++) {\r\n        let semitones = getSemitonesBetweenNotes(notes[0], notes[i]);\r\n        res.push(semitones);\r\n    }\r\n\r\n    return res;\r\n}\r\n\r\nfunction getNameFromMap(intervals) {\r\n    let current = naming;\r\n    let lastIndex = 0;\r\n    let val = \"\";\r\n    for(let i = 0; i < intervals.length; i++) {\r\n        let interval = intervals[i];\r\n        let next = current[interval];\r\n        if(!next) {\r\n            lastIndex = i;\r\n            break;\r\n        }\r\n        current = next;\r\n    }\r\n\r\n    if(lastIndex === 0) {\r\n        return current.value;\r\n    }\r\n\r\n    var ext = extensions.seventh[intervals[lastIndex]]\r\n    \r\n\r\n    return current.value + ext;\r\n}","import { NOTES } from \"../constants\";\r\nimport { getChordName } from \"../util/NamingUtils\";\r\n\r\nexport class Scale{\r\n    constructor(root, family, offset = 0) {\r\n        this.root = root;\r\n        this.family = family;\r\n        this.offset = offset;\r\n        this.notes = []\r\n        this.init();\r\n    }\r\n\r\n    init() {\r\n        let nts = [];\r\n        nts[0] = Number(this.root);\r\n        for (let i = 0; i < this.family.intervals.length; i++) {\r\n            let j = (this.offset + i) % this.family.intervals.length;\r\n            nts.push((Number(nts[i]) + Number(this.family.intervals[j])) % 12);\r\n        }\r\n\r\n        this.notes = nts;\r\n    }\r\n\r\n    //get note by index, including out of range indices. this also ignores the last (doubled) note in the scale\r\n    getNote(index) {\r\n        return this.notes[index % (this.notes.length - 1)];\r\n    }\r\n\r\n    getChord(startIndex, indices) {\r\n        let noots = [];\r\n        for (let i = 0; i < indices.length; i++) {\r\n            const index = indices[i];\r\n            noots.push(this.getNote(index + startIndex));\r\n        }\r\n\r\n        return {name:NOTES[this.notes[startIndex]].names[0] + getChordName(noots), notes: noots};\r\n    }\r\n\r\n    getChordsOfType(type) {\r\n        let result = [];\r\n        for (let i = 0; i < this.notes.length - 1; i++) {\r\n            result.push(this.getChord(i, type));\r\n        }\r\n\r\n        return result;\r\n    }\r\n}","import React from \"react\";\r\nconst margin = {top:70,bottom:10, left:50, right:50};\r\nconst fretsDisplayed = 4;\r\nconst fretHeight = 46; \r\nconst stringCount = 6;\r\nconst stringOffset = 30;\r\nconst circleRadius = 12;\r\n\r\nconst title = {\r\n    fontWeight:500\r\n}\r\n\r\nconst subtext = {\r\n    fontWeight:500,\r\n    /* fill:\"#323232\" */\r\n}\r\n\r\nconst line = {\r\n    /* stroke:\"#000000\", */\r\n    strokeWidth:2\r\n}\r\n\r\nconst nut = {\r\n    /* stroke:\"#000000\", */\r\n    strokeWidth:3\r\n}\r\n\r\nconst circle = {\r\n    /* fill:\"#212121\" */\r\n}\r\n\r\nexport default function Diagram({data, k}) {\r\n    const chordData = data;\r\n    if(!chordData || !chordData.fingering) return \"\";\r\n\r\n    chordData.fingering = Object.values(chordData.fingering)\r\n\r\n    function _generateLines() {\r\n        let lines = [];\r\n        for (let i = 0; i < stringCount; i++) {\r\n            let x = margin.left + i * stringOffset;\r\n            lines.push(<line x1={x} x2={x} y1={margin.top} y2={margin.top + (fretHeight*fretsDisplayed)} style={line}/>)\r\n        }\r\n        return lines;\r\n    }\r\n\r\n    function _generateFrets() {\r\n        let frets = [];\r\n        for (let index = 1; index <= fretsDisplayed; index++) {\r\n            frets.push(<line x1={margin.left} x2={margin.left + stringOffset*(stringCount - 1)} y1={margin.top + index*fretHeight} y2={margin.top + index*fretHeight} style={line}/>)\r\n        }\r\n        return frets;\r\n    }\r\n\r\n    function _generateChordDisplay(chord, nutLocation = 0) {\r\n        let data = [];\r\n        if(nutLocation !== 0) {\r\n            //add fret # next t highest finger\r\n            data.push(<text style={subtext} x={margin.left + stringOffset*5.7} y={margin.top + fretHeight/1.66}>{nutLocation + 1}</text>)\r\n        }\r\n        for (let i = 0; i < stringCount; i++) {\r\n            let position = chord.fingering[i];\r\n\r\n            if(position > 0) {\r\n                data.push(<circle r={circleRadius} cx={(margin.left + i * stringOffset)} cy={margin.top + (position - nutLocation) * fretHeight - fretHeight/2} style={circle}/>)\r\n            } else {\r\n                let symbol = \"\";\r\n                switch(position) {\r\n                    case 0:\r\n                        symbol = \"o\";\r\n                        break;\r\n                    case -1:\r\n                        symbol = \"x\";\r\n                        break;\r\n                    default:\r\n                        break;\r\n                }\r\n\r\n                data.push(<text width={12} height={14} x={i * stringOffset + margin.left} y={margin.top - 14}/*  fill={\"#000000\"} */ textAnchor=\"middle\" style={title}>{symbol}</text>)\r\n            }\r\n        }\r\n\r\n        return data;\r\n    }\r\n\r\n    let lines = _generateLines();\r\n    let frets = _generateFrets();\r\n    let lowestString = 24;\r\n    let highestString = -1;\r\n    chordData.fingering.forEach(e => {\r\n        if (e < lowestString && e > 0) lowestString = e;\r\n        if (e > highestString) highestString = e;\r\n    })\r\n\r\n    const diff = highestString - lowestString;\r\n    const nutLocation = lowestString + diff < 4 ? 0 : lowestString - 1; \r\n    \r\n    let fingerPlacement = _generateChordDisplay(chordData, nutLocation);\r\n\r\n    return (<svg key={k} className=\"diagram\" viewBox={\"0 0 \"+((stringOffset*(stringCount-1)) + margin.left + margin.right)+\" \"+((fretHeight*fretsDisplayed) + margin.top + margin.bottom)}>\r\n        <text className=\"name\" x={((stringOffset*(stringCount-1)) + margin.left + margin.right)/2} y={margin.top / 2} textAnchor=\"middle\" style={title}>{chordData.name}</text>\r\n        <line x1={margin.left - 5} x2={margin.left + stringOffset*(stringCount - 1) + 5} y1={margin.top} y2={margin.top} style={nut}/>\r\n        {lines}\r\n        {frets}\r\n        {fingerPlacement}\r\n    </svg>)\r\n}","import { NOTES, STANDARD_TUNING } from \"../constants\";\r\n\r\nconst fretsDisplayed = 13;\r\nconst margin = {top:50,bottom:50, left:50, right:50};\r\nconst fretheight = 46;\r\nconst stringCount = 6;\r\nconst stringOffset = 25;\r\nconst circleRadius = 12;\r\n\r\nconst title = {\r\n    fontWeight:500\r\n}\r\n\r\nconst circle = {\r\n    fill:\"#212121\"\r\n}\r\n\r\nconst rootCircle = {\r\n    fill:\"#E75915\"\r\n}\r\n\r\nconst subtext = {\r\n    fontWeight:500,\r\n    fill:\"#fff\"\r\n}\r\n\r\nconst line = {\r\n    stroke:\"#333333\",\r\n    strokeWidth:2\r\n}\r\n\r\nconst nut = {\r\n    stroke:\"#000000\",\r\n    strokeWidth:7\r\n}\r\n\r\nconst halfnut = {\r\n    stroke:\"#323232\",\r\n    strokeWidth:4\r\n}\r\n\r\nexport default function ScaleDiagram({notes, ommits, tuning = STANDARD_TUNING}) {\r\n    const lines = generateLines();\r\n    const dots = generateDots();\r\n    const numbers = generateNumbers();\r\n\r\n\r\n    function generateLines() {\r\n        let lines = [];\r\n        for (let i = 1; i < fretsDisplayed + 1; i++) {\r\n            lines.push(<line style={line} x1={margin.left + (i*fretheight)} x2={margin.left + (i*fretheight)} y1={margin.top} y2={margin.top + stringOffset * (stringCount - 1)} />)\r\n        }\r\n        \r\n        for (let i = 0; i < stringCount; i++) {\r\n            lines.push(<line style={line} x1={margin.left} x2={margin.left + fretsDisplayed*fretheight} y1={margin.top + i * stringOffset} y2={margin.top + i * stringOffset}/>)    \r\n        }\r\n        lines.push(<line style={nut} x1={margin.left} x2={margin.left} y1={margin.top - 2} y2={margin.top + (stringOffset * (stringCount - 1)) + 2} />);\r\n        lines.push(<line style={halfnut} x1={margin.left + fretheight * 12} x2={margin.left + fretheight * 12} y1={margin.top - 2} y2={margin.top + (stringOffset * (stringCount - 1)) + 2} />);\r\n        return lines;\r\n    }\r\n\r\n    function generateDots() {\r\n        if(!tuning || !notes) return [];\r\n        let dots = [];\r\n        for (let string = 0; string < stringCount; string++) {\r\n            const base = tuning[(stringCount - 1) - string];\r\n            for (let fret = 0; fret < fretsDisplayed; fret++) {\r\n                let note = (base + fret) % 12;\r\n                if (notes.includes(note) && !ommits.includes(notes.indexOf(note))) {\r\n                    if (fret === 0) {\r\n                        dots.push(<circle r={circleRadius} cx={(margin.left - fretheight/2.8)} cy={margin.top + string * stringOffset} style={note === notes[0] ? rootCircle : circle}/>);\r\n                        dots.push(<text x={(margin.left - fretheight/2.8)} y={margin.top + string * stringOffset + 5} textAnchor={\"middle\"} style={subtext}>{NOTES[note].names[0]}</text>);\r\n                    } else {\r\n                        dots.push(<circle r={circleRadius} cx={(margin.left + fret * fretheight - fretheight/2)} cy={margin.top + string * stringOffset} style={note === notes[0] ? rootCircle : circle}/>)\r\n                        dots.push(<text x={(margin.left + fret * fretheight - fretheight/2)} y={margin.top + string * stringOffset + 5} textAnchor={\"middle\"} style={subtext}>{NOTES[note].names[0]}</text>);\r\n                    }\r\n                }\r\n            }\r\n            \r\n        }\r\n        return dots\r\n    }\r\n\r\n    function generateNumbers() {\r\n        let numbers = [];\r\n        const nums = [3,5,7,9,12];\r\n\r\n        nums.forEach(n => {\r\n            numbers.push(<text textAnchor={\"middle\"} x={margin.left + (fretheight * n) - fretheight/2} y={margin.top / 2} >{n}</text>);\r\n        })\r\n\r\n        return numbers;\r\n    }\r\n\r\n    return <svg viewBox={\"0 0 \"+(margin.left + (fretheight * fretsDisplayed) + margin.right)+\" \"+(margin.top + (stringOffset * (stringCount - 1)) + margin.bottom)}  /* width={margin.left + (fretheight * fretsDisplayed) + margin.right} height={margin.top + (stringOffset * (stringCount - 1)) + margin.bottom} */>\r\n        {/* <rect width={margin.left+fretheight * fretsDisplayed+margin.right} height={margin.top+stringOffset * (stringCount - 1)+margin.bottom}  style={{fill:\"#888\"}}/> */}\r\n        <rect y={margin.top} x={margin.left} width={fretheight * fretsDisplayed} height={stringOffset * (stringCount - 1)}  style={{fill:\"#fff\"}}/>\r\n        {lines}\r\n        {dots}\r\n        {numbers}\r\n    </svg>\r\n}","import { STANDARD_TUNING } from \"../constants\";\r\n\r\nexport function getNoteOnString(fret:number, string:number, tuning:number[] = STANDARD_TUNING) : number {\r\n    return (tuning[string] + fret) % 12;\r\n}","import { STANDARD_TUNING } from \"../constants\";\r\nimport { getNoteOnString } from \"../util/TheoryUtils\";\r\n\r\nconst BLOCK_SIZE = 3;\r\n\r\nexport async function getDiagramsForChord(\r\n    chord: { name: any; notes: number[]}, \r\n    tuning: number[], \r\n    options:{\r\n        allowInversions: boolean,\r\n        mutedMustBeConnected: boolean,\r\n        maxMutedCount:number,\r\n        mutedNotInCenter:boolean\r\n    } = {allowInversions:false,mutedMustBeConnected:true, maxMutedCount:3, mutedNotInCenter:true}) \r\n    : Promise<{name:string, fingering: Array<number>}[]> {\r\n    const possibleIndices = getFretBoardPositionsOfChord(chord.notes, tuning);\r\n\r\n    let fingerings : number[][] = [];\r\n    for (let i = 0; i < (12 - BLOCK_SIZE); i++) {\r\n        const set: Set<number[]> = new Set();\r\n        set.add([-1,-1,-1,-1,-1,-1])\r\n        const fings = recursivelyGetBlock(0, i, set, possibleIndices);\r\n        // eslint-disable-next-line no-loop-func\r\n        fings.forEach(element => {\r\n            fingerings.push(element);\r\n        });\r\n    }\r\n\r\n    fingerings = removeDuplicates(fingerings);\r\n    fingerings = fingerings.filter(e => validateFingering(e, tuning, chord.notes, options));\r\n\r\n    let result:{name:string, fingering: Array<number>}[] = [];\r\n    fingerings.forEach(e => {\r\n        result.push({name:chord.name, fingering: e});\r\n    })\r\n\r\n    return result;\r\n}\r\n\r\nfunction removeDuplicates(array: number[][]): number[][] {\r\n    let res : number[][] = [];\r\n    let set : Set<string> = new Set();\r\n\r\n    for(let val of array) {\r\n        const v = Object.values(val);\r\n\r\n        let str = \"\";\r\n        v.forEach(e=>str += e);\r\n\r\n        if(!set.has(str)) {\r\n            set.add(str);\r\n            res.push(v);\r\n        }\r\n    }\r\n\r\n    return res;\r\n}\r\n\r\nfunction getFretBoardPositionsOfChord(notes : number[], tuning : number[] = STANDARD_TUNING) : number[][] {\r\n    let possibleIndicesPerString : number[][] = [];\r\n    tuning.forEach(e=>possibleIndicesPerString.push([-1]));\r\n\r\n    //check all frets\r\n    for (let fret = 0; fret < 12; fret++) {\r\n        //check all strings\r\n        for (let string = 0; string < tuning.length; string++) {\r\n            const note = getNoteOnString(fret, string, tuning);\r\n            if (notes.includes(note)) {\r\n                possibleIndicesPerString[string].push(fret);\r\n            }\r\n        }\r\n    }\r\n\r\n    return possibleIndicesPerString;\r\n}\r\n\r\nfunction recursivelyGetBlock(currentString: number, startFret: number, currentSet: Set<number[]>, possibilities: number[][]) : Set<number[]> {\r\n    if (currentString === 6) return currentSet;\r\n    let currentPossibilities: number[] = [];\r\n    let currentStringNotes: number[] = possibilities[currentString];\r\n\r\n    for (let index of currentStringNotes) {\r\n        if ((index >= startFret && index - startFret < BLOCK_SIZE) || index <= 0) {\r\n            currentPossibilities.push(index);\r\n        }\r\n    }\r\n\r\n    let result: Set<number[]> = new Set();\r\n    for (let possibleIndex of currentPossibilities) {\r\n        let next:Set<number[]> = new Set();\r\n        currentSet.forEach(e => {\r\n            let clone = {...e};\r\n            next.add(clone);\r\n        });\r\n\r\n        next.forEach(entry => {\r\n            entry[currentString] = possibleIndex;\r\n        })\r\n\r\n        let nextResult = recursivelyGetBlock(currentString + 1, startFret, next, possibilities);\r\n        nextResult.forEach(e => result.add(e));\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nfunction validateFingering(fingering : number[], tuning:number[], chordNotes:number[], options:{allowInversions: boolean, mutedMustBeConnected: boolean, maxMutedCount:number, mutedNotInCenter:boolean}) : boolean {\r\n    const fingers = Object.values(fingering);\r\n    let muted = 0;\r\n    let bassFound = false;\r\n    let bassIsRoot = false;\r\n    let mutedAreConnected = true;\r\n    let allNotes:number[] = [];\r\n    for(let i = 0; i < fingers.length; i++) {\r\n        const note = getNoteOnString(fingers[i], i, tuning);\r\n        allNotes.push(note);\r\n        if(fingers[i] === -1) {\r\n            if ([2,3,4].includes(i) && options.mutedNotInCenter) {\r\n                return false;\r\n            }\r\n            if(muted > 0) {\r\n                //check if muted string is connected to other muted strings\r\n                let left = fingers[i - 1];\r\n                let right = i === fingers.length - 1 ? 0 : fingers[i + 1];\r\n                mutedAreConnected = left === -1 || right === -1;\r\n            }\r\n            muted += 1;\r\n        } else if(!bassFound) {\r\n            bassFound = true;\r\n            if(note === chordNotes[0]) {\r\n                bassIsRoot = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    //check if all notes are present in the current chord\r\n    chordNotes.forEach(n => {\r\n        if(!allNotes.includes(n)) {\r\n            return false;\r\n        }\r\n    })\r\n\r\n\r\n    return (muted <= options.maxMutedCount) && (options.allowInversions || bassIsRoot) && (mutedAreConnected || !options.mutedMustBeConnected);\r\n}","import { useEffect, useState } from \"react\"\r\nimport { CHORD_TYPES, NOTES, SCALE_FAMILIES, STANDARD_TUNING } from \"../constants\";\r\nimport { Scale } from \"../objects/Scale\";\r\nimport \"../stylesheets/explorer.scss\";\r\nimport Diagram from \"../components/Diagram\";\r\nimport ScaleDiagram from \"../components/ScaleDiagram\";\r\nimport { getDiagramsForChord } from \"../logic/ChordDiagramLogic\";\r\n\r\nconst presets = [\r\n    {name:\"Minor Pentatonic\", family:SCALE_FAMILIES[0], mode:5, ommits:[2,5]}\r\n]\r\n\r\nexport default function ScaleExplorer() {\r\n    const [scale, setScale] = useState();\r\n    const [family, setFamily] = useState(SCALE_FAMILIES[0]);\r\n    const [root, setRoot] = useState(0);\r\n    const [mode, setMode] = useState(0);\r\n    const [ommits, setOmmits] = useState([]);\r\n    const [notesWithOmmits, setNotesWithOmmits] = useState([])\r\n\r\n    const [triads, setTriads] = useState([]);\r\n    const [sevenths, setSevenths] = useState([]);\r\n    const [ninths, setNinths] = useState([]);\r\n\r\n    const [diagrams, setDiagrams] = useState([]);\r\n\r\n    useEffect(()=> {\r\n        updateScale();\r\n    }, [family, root, mode])\r\n\r\n    useEffect(()=> {\r\n        if(scale) {\r\n            setTriads(scale.getChordsOfType(CHORD_TYPES.triad));\r\n            setSevenths(scale.getChordsOfType(CHORD_TYPES.seventh));\r\n            setNinths(scale.getChordsOfType(CHORD_TYPES.ninth));\r\n        }\r\n    }, [scale])\r\n\r\n    function updateScale() {\r\n        let s = new Scale(root, family, mode);\r\n        setScale(s);\r\n    }\r\n\r\n    function toggleOmmit(n) {\r\n        let o = [...ommits];\r\n        let i = o.indexOf(n);\r\n        if (i === -1) {\r\n            o.push(n);\r\n        } else {\r\n            o.splice(i,1);\r\n        }\r\n        setOmmits(o);\r\n        console.log(ommits);\r\n    }\r\n\r\n    async function getDiagrams(chord) {\r\n        const d = await getDiagramsForChord(chord);\r\n        console.log(\"diagrams:\", d);\r\n        setDiagrams(d);\r\n    }\r\n\r\n    function applyPreset(preset) {\r\n        if (preset.family) setFamily(preset.family);\r\n        if (preset.mode) setMode(preset.mode);\r\n        if (preset.ommits) setOmmits(preset.ommits);\r\n    }\r\n\r\n    return <div className=\"page\">\r\n        <div className=\"explorer\">\r\n            <div className=\"input\">\r\n                <label>\r\n                    Root: <br/>\r\n                    <select onChange={e=>setRoot(e.target.value)}>\r\n                        {\r\n                            NOTES.map((note, i) => <option key={i+\"n\"} value={i} selected={root === i ? \"selected\":null}>{note.names[0]}</option>)\r\n                        }\r\n                    </select>\r\n                </label>\r\n                <label>\r\n                    Scale Type:<br/> \r\n                    <select onChange={e=>setFamily(SCALE_FAMILIES[e.target.value])}>\r\n                        {\r\n                            SCALE_FAMILIES.map((fam, i) => <option key={i+\"f\"} value={i} selected={family.name === fam.name ? \"selected\":null}>{fam.name}</option>)\r\n                        }\r\n                    </select>\r\n                </label>\r\n                <label>\r\n                    Scale Type:<br/> \r\n                    <select onChange={e=>setMode(e.target.value)}>\r\n                        {\r\n                            family?.modes?.map((mode, i) => <option key={i+\"m\"} value={i} selected={mode === i ? \"selected\" : null}>{mode}</option>)\r\n                        }\r\n                    </select>\r\n                </label>\r\n            </div>\r\n            <div className=\"scaleNotes\">\r\n                {\r\n                    scale?.notes?.map((n, i) => <span key={\"ommit\"+i}className={ommits.includes(i) ? \"ommit\" : \"\"} onClick={()=>toggleOmmit(i)}>{NOTES[n].names[0]}</span>)\r\n                }\r\n            </div>\r\n            <div className=\"chords\">\r\n                <h1>Triads</h1>\r\n                <div className=\"repeater\">\r\n                {\r\n                    triads?.map((e,i) => ommits.includes(i) ? <></> : <button key={i+\"b3\"} onClick={()=>getDiagrams(e)}>\r\n                        {e.name}\r\n                        <span className=\"notes\">{e.notes.map((n,j) => <span key={j+\"3\"+i} className=\"note\">{NOTES[n].names[0]}</span>)}</span>\r\n                    </button>)\r\n                }\r\n                </div>\r\n                <h1>Sevenths</h1>\r\n                <div className=\"repeater\">\r\n                {\r\n                    sevenths?.map((e,i) => ommits.includes(i) ? <></> : <button key={i+\"b7\"} onClick={()=>getDiagrams(e)}>\r\n                        {e.name}\r\n                        <span className=\"notes\">{e.notes.map((n,j) => <span key={j+\"7\"+i} className=\"note\">{NOTES[n].names[0]}</span>)}</span>\r\n                    </button>)\r\n                }\r\n                </div>\r\n                <h1>Ninths</h1>\r\n                <div className=\"repeater\">\r\n                {\r\n                    ninths?.map((e,i) => ommits.includes(i) ? <></> : <button key={i+\"b9\"} onClick={()=>getDiagrams(e)}>\r\n                        {e.name}\r\n                        <span className=\"notes\">{e.notes.map((n,j) => <span key={j+\"9\"+i} className=\"note\">{NOTES[n].names[0]}</span>)}</span>\r\n                    </button>)\r\n                }\r\n                </div>\r\n            </div>\r\n            <div className=\"presets\">\r\n                <h1>Presets</h1>\r\n                {\r\n                    presets.map(preset => \r\n                        <button onClick={()=>applyPreset(preset)}>{preset.name}</button>    \r\n                    )\r\n                }\r\n            </div>\r\n            <div className=\"diagrams\">\r\n               {diagrams.map((e,i)=> <Diagram k={i+\"di\"} data={e}/>)}\r\n            </div>\r\n            <div className=\"scaleDiagram\">\r\n                {scale && <ScaleDiagram tuning={STANDARD_TUNING} ommits={ommits} notes={scale.notes}/>}\r\n            </div>\r\n        </div>\r\n    </div>\r\n}","import ScaleExplorer from './pages/ScaleExplorer';\nimport './App.css';\nimport \"./stylesheets/colors.scss\";\nimport \"./stylesheets/page.scss\";\n\nfunction App() {\n  return <ScaleExplorer/>\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}