{"version":3,"sources":["logo.svg","Router.js","constants.js","util/NamingUtils.js","objects/Scale.js","util/TheoryUtils.ts","components/Diagram.js","components/ScaleDiagram.js","pages/ScaleExplorer.js","App.js","reportWebVitals.js","index.js"],"names":["Route","path","children","useState","window","location","pathname","currentPath","setCurrentPath","paths","useEffect","onLocationChange","addEventListener","removeEventListener","pa","b","forEach","p","regExprStr","replace","RegExp","test","match","Router","props","SCALE_FAMILIES","name","intervals","modes","CHORD_TYPES","NOTES","names","STANDARD_TUNING","getChordName","notes","current","naming","lastIndex","i","length","next","value","ext","extensions","seventh","getNameFromMap","res","semitones","getSemitonesBetweenNotes","push","getIntervalsBetweenNotesOfChord","a","Scale","root","family","offset","this","init","nts","Number","j","index","startIndex","indices","noots","getNote","type","result","getChord","getDiagramsForChord","chord","tuning","fingering","removeDuplicates","getChordFingerings","crd","array","set","Set","val","string","JSON","stringify","has","add","possibilities","fret","includes","chords","ch","recursivelyGetBlock","c","filter","validateChord","chordNotes","Object","values","note","chordNote","bassCheck","sum","strindex","currentString","startFret","currentSet","currentPossibilities","currentStringNotes","possibleIndex","e","assign","margin","fretHeight","stringOffset","title","fontWeight","subtext","line","strokeWidth","nut","circle","Diagram","chordData","data","lines","x","x1","x2","y1","y2","style","_generateLines","frets","_generateFrets","lowestString","highestString","fingerPlacement","nutLocation","y","position","r","cx","cy","symbol","width","height","textAnchor","_generateChordDisplay","className","viewBox","fretheight","fill","rootCircle","stroke","halfnut","ScaleDiagram","ommits","fretsDisplayed","generateLines","dots","base","stringCount","indexOf","generateDots","numbers","n","generateNumbers","ScaleExplorer","scale","setScale","setFamily","setRoot","mode","setMode","setOmmits","triads","setTriads","sevenths","setSevenths","ninths","setNinths","diagrams","setDiagrams","getDiagrams","d","console","log","s","updateScale","getChordsOfType","onChange","target","map","fam","onClick","o","splice","toggleOmmit","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1fdcd5f5.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from \"react\";\nimport { useEffect, useState } from 'react';\n\nexport default function Route({ path, children }) {\n    const [currentPath, setCurrentPath] = useState(window.location.pathname);\n    const paths = typeof path === 'string' ? [path] : path;\n\n    useEffect(() => {\n        // Define callback as separate function so it can be removed later with cleanup function\n        const onLocationChange = () => {\n            // Update path state to current window URL\n            setCurrentPath(window.location.pathname);\n        }\n\n        // Listen for popstate event\n        window.addEventListener('popstate', onLocationChange);\n\n        // Clean up event listener\n        return () => {\n            window.removeEventListener('popstate', onLocationChange)\n        };\n    }, [])\n\n    const match = (pa) => {\n        let b = false;\n        pa.forEach((p) => {\n            let regExprStr = '^';\n            regExprStr += p.replace('/*', '[/a-zA-Z0-9-]*').replace('/:id', '/[a-zA-Z0-9-]*');\n            regExprStr += '$';\n\n            const regExpr = new RegExp(regExprStr);\n            if (regExpr.test(currentPath)) b = true;\n        });\n        return b;\n    };\n\n    return (\n        match(paths) ? children : null\n    );\n}\n\nexport function Router(props) {\n    return (props.children);\n}\n\nexport function navigate(path) {\n    const url = new URL(path, window.location.origin);\n\n    window.history.pushState({}, \"\", url);\n\n    const navEvent = new PopStateEvent('popstate');\n    window.dispatchEvent(navEvent);\n}","export const SCALE_FAMILIES = [\r\n    {name:\"Major\", intervals:[2,2,1,2,2,2,1], modes:[\"Major/Ionian\", \"Dorian\", \"Phrygian\", \"Lydian\", \"Mixolydian\", \"Natural Minor/Aeolian\", \"Locrian\"]},\r\n    {name:\"Melodic Minor\", intervals:[2,1,2,2,2,2,1], modes:[\"Melodic Minor\", \"Dorian b2\", \"Lydian Aug.\", \"Lydian dom.\", \"Aeo. dom.\", \"Half diminished\", \"Alt.\"]},\r\n    {name:\"Harmonic Minor\", intervals:[2,1,2,2,1,3,1], modes:[\"Harmonic Minor\", \"Locrian nat. 6\", \"Major #5\", \"Doroam #4\", \"Phrygian dom.\", \"Lydian #2\", \"Alt. dom. bb7\"]},\r\n    {name:\"Harmonic Major\", intervals:[2,2,1,2,1,3,1], modes:[\"Harmonic Major\", \"Dorian b5\", \"Phrygian b4\", \"Lydian b3\", \"Mixo. b2\", \"Lydian Augmented #2\", \"Locrian bb7\"]},\r\n    {name:\"Diminished\", intervals:[2,1,2,1,2,1,2,1], modes:[\"Diminished\", \"Inverted Diminished\"]},\r\n    {name:\"Whole Tone\", intervals:[2,2,2,2,2,2], modes:[\"Whole Tone\"]},\r\n    {name:\"Augmented\", intervals:[3,1,3,1,3,1], modes:[\"Augmented\", \"Inverted Augmented\"]}\r\n]\r\n\r\nexport const CHORD_TYPES = {\r\n    triad:[0,2,4],\r\n    seventh:[0,2,4,6],\r\n    ninth:[0,2,4,6,8]\r\n}\r\n\r\nexport const NOTES = [\r\n    {names: [\"A\"]},\r\n    {names: [\"A#\", \"Bb\"]},\r\n    {names: [\"B\", \"Cb\"]},\r\n    {names: [\"C\", \"B#\"]},\r\n    {names: [\"C#\", \"Db\"]},\r\n    {names: [\"D\"]},\r\n    {names: [\"D#\", \"Eb\"]},\r\n    {names: [\"E\", \"Fb\"]},\r\n    {names: [\"F\", \"E#\"]},\r\n    {names: [\"F#\", \"Gb\"]},\r\n    {names: [\"G\"]},\r\n    {names: [\"G#\", \"Ab\"]}\r\n]\r\n\r\nexport const STANDARD_TUNING = [7, 0, 5, 10, 2, 7];","import naming from \"../json/naming.json\";\r\nimport extensions from \"../json/extensions.json\";\r\n\r\nexport function getChordName(notes) {\r\n    let intervals = getIntervalsBetweenNotesOfChord(notes);\r\n    return getNameFromMap(intervals);\r\n}\r\n\r\nfunction getSemitonesBetweenNotes(a, b) {\r\n    if(a < b) {\r\n        return b - a;\r\n    } else {\r\n        return b + (12 - a);\r\n    }\r\n}\r\n\r\nfunction getIntervalsBetweenNotesOfChord(notes) {\r\n    let res = [];\r\n    for (let i = 1; i < notes.length; i++) {\r\n        let semitones = getSemitonesBetweenNotes(notes[0], notes[i]);\r\n        res.push(semitones);\r\n    }\r\n\r\n    return res;\r\n}\r\n\r\nfunction getNameFromMap(intervals) {\r\n    let current = naming;\r\n    let lastIndex = 0;\r\n    let val = \"\";\r\n    for(let i = 0; i < intervals.length; i++) {\r\n        let interval = intervals[i];\r\n        let next = current[interval];\r\n        if(!next) {\r\n            lastIndex = i;\r\n            break;\r\n        }\r\n        current = next;\r\n    }\r\n\r\n    if(lastIndex === 0) {\r\n        return current.value;\r\n    }\r\n\r\n    var ext = extensions.seventh[intervals[lastIndex]]\r\n    \r\n\r\n    return current.value + ext;\r\n}","import { NOTES } from \"../constants\";\r\nimport { getChordName } from \"../util/NamingUtils\";\r\n\r\nexport class Scale{\r\n    constructor(root, family, offset = 0) {\r\n        this.root = root;\r\n        this.family = family;\r\n        this.offset = offset;\r\n        this.notes = []\r\n        this.init();\r\n    }\r\n\r\n    init() {\r\n        let nts = [];\r\n        nts[0] = Number(this.root);\r\n        for (let i = 0; i < this.family.intervals.length; i++) {\r\n            let j = (this.offset + i) % this.family.intervals.length;\r\n            nts.push((Number(nts[i]) + Number(this.family.intervals[j])) % 12);\r\n        }\r\n\r\n        this.notes = nts;\r\n    }\r\n\r\n    //get note by index, including out of range indices. this also ignores the last (doubled) note in the scale\r\n    getNote(index) {\r\n        return this.notes[index % (this.notes.length - 1)];\r\n    }\r\n\r\n    getChord(startIndex, indices) {\r\n        let noots = [];\r\n        for (let i = 0; i < indices.length; i++) {\r\n            const index = indices[i];\r\n            noots.push(this.getNote(index + startIndex));\r\n        }\r\n\r\n        return {name:NOTES[this.notes[startIndex]].names[0] + getChordName(noots), notes: noots};\r\n    }\r\n\r\n    getChordsOfType(type) {\r\n        let result = [];\r\n        for (let i = 0; i < this.notes.length - 1; i++) {\r\n            result.push(this.getChord(i, type));\r\n        }\r\n\r\n        return result;\r\n    }\r\n}","import { STANDARD_TUNING } from \"../constants\";\r\nimport Diagram from \"../components/Diagram\";\r\n\r\nexport async function getDiagramsForChord(chord: { name: any; notes: number[]}, tuning: number[]) : Promise<{name:string, fingering: Array<number>}[]> {\r\n    let result = [];\r\n    let fingering = getChordFingerings(chord, tuning);\r\n    fingering = removeDuplicates(fingering);\r\n    \r\n    for (let crd of fingering) {\r\n       result.push({name:chord.name, fingering:crd})\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nfunction removeDuplicates(array: number[][]): number[][] {\r\n    let res : number[][] = [];\r\n    let set : Set<any> = new Set();\r\n\r\n    for(let val of array) {\r\n        let string = JSON.stringify(val);\r\n        if(!set.has(string)) {\r\n            set.add(string);\r\n            res.push(val);\r\n        }\r\n    }\r\n\r\n    return res;\r\n}\r\n\r\nfunction getChordFingerings(chord: { name?: any; notes: any; }, tuning = STANDARD_TUNING): number[][] {\r\n    let notes: number[] = chord.notes;\r\n    \r\n    let possibilities: number[][] = [];\r\n    for(let i = 0; i < 6; i++) {\r\n        possibilities.push([]);\r\n    }\r\n\r\n    for (let fret = 0; fret < 12; fret++) {\r\n        for (let string = 0; string < 6; string++) {\r\n            if (notes.includes((tuning[string] + fret) % 12)) {\r\n                possibilities[string].push(fret);\r\n            }\r\n        }   \r\n    }\r\n\r\n    let chords: number[][] = [];\r\n    for (let index = 0; index < 12; index++) {\r\n        let ch = recursivelyGetBlock(0, index, [[-1,-1,-1,-1,-1,-1]], possibilities);\r\n        for(let c of ch) {\r\n            chords.push(c);\r\n        }\r\n    }\r\n\r\n    return chords.filter(c => validateChord(c, notes, tuning));\r\n}\r\n\r\nfunction validateChord(c: number[], chordNotes: number[], tuning:number[]) : boolean{\r\n    let set:Set<number> = new Set();\r\n    let chord:any = Object.values(c);\r\n    for (let i = 0; i < chord.length; i++) {\r\n        let index:number = chord[i];\r\n        let note = (tuning[i] + index) % 12;\r\n        set.add(note);\r\n    }\r\n\r\n    for (let index = 0; index < chordNotes.length; index++) {\r\n        let chordNote = chordNotes[index];\r\n        if (!set.has(chordNote)) {\r\n            if (chordNotes.length === 3) {\r\n                return false;\r\n            } else if (index !== 2) {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n\r\n    let bassCheck = false;\r\n    let sum = 0;\r\n    for (let i = 0; i < chord.length; i++) {\r\n        let strindex:number = chord[i];\r\n        if (strindex === -1) {\r\n            sum++;\r\n            if ((i > 1 && i !== 5) || (i === 1 && chord[0] !== -1)) {\r\n                return false;\r\n            } else if (!bassCheck) {\r\n                if (chordNotes[i] === (tuning[i] + strindex) % 12) {\r\n                    bassCheck = true;\r\n                } else {\r\n                    return false;//chord does not start on bass root note\r\n                }\r\n            }\r\n        } \r\n    }\r\n\r\n    return sum < 3\r\n}\r\n\r\nfunction recursivelyGetBlock(currentString: number, startFret: number, currentSet: number[][], possibilities: number[][]) : number[][] {\r\n    if (currentString === 6) return currentSet;\r\n    let currentPossibilities: number[] = []\r\n    let currentStringNotes: number[] = possibilities[currentString];\r\n\r\n    for (let index of currentStringNotes) {\r\n        if (index > startFret + 3) break;\r\n        if (index >= startFret || index <= 0) {\r\n            currentPossibilities.push(index);\r\n        }\r\n    }\r\n\r\n    let result: number[][] = [];\r\n    for (let possibleIndex of currentPossibilities) {\r\n        let next:number[][] = [];\r\n        currentSet.forEach(e => next.push(Object.assign({}, e)));\r\n\r\n        for(let i = 0; i < next.length; i++) {\r\n            let chord:number[] = next[i];\r\n            chord[currentString] = possibleIndex;\r\n            next[i] = chord;\r\n        }\r\n\r\n        let nextResult = recursivelyGetBlock(currentString + 1, startFret, next, possibilities);\r\n        nextResult.forEach(e => result.push(e));\r\n    }\r\n\r\n    return result;\r\n}","import React from \"react\";\r\nconst margin = {top:70,bottom:10, left:50, right:50};\r\nconst fretsDisplayed = 4;\r\nconst fretHeight = 46; \r\nconst stringCount = 6;\r\nconst stringOffset = 30;\r\nconst circleRadius = 12;\r\n\r\nconst title = {\r\n    fontWeight:500\r\n}\r\n\r\nconst subtext = {\r\n    fontWeight:500,\r\n    /* fill:\"#323232\" */\r\n}\r\n\r\nconst line = {\r\n    /* stroke:\"#000000\", */\r\n    strokeWidth:2\r\n}\r\n\r\nconst nut = {\r\n    /* stroke:\"#000000\", */\r\n    strokeWidth:3\r\n}\r\n\r\nconst circle = {\r\n    /* fill:\"#212121\" */\r\n}\r\n\r\nexport default function Diagram(props) {\r\n    const chordData = props.data;\r\n    if(!chordData || !chordData.fingering) return \"\";\r\n\r\n    chordData.fingering = Object.values(chordData.fingering)\r\n\r\n    function _generateLines() {\r\n        let lines = [];\r\n        for (let i = 0; i < stringCount; i++) {\r\n            let x = margin.left + i * stringOffset;\r\n            lines.push(<line x1={x} x2={x} y1={margin.top} y2={margin.top + (fretHeight*fretsDisplayed)} style={line}/>)\r\n        }\r\n        return lines;\r\n    }\r\n\r\n    function _generateFrets() {\r\n        let frets = [];\r\n        for (let index = 1; index <= fretsDisplayed; index++) {\r\n            frets.push(<line x1={margin.left} x2={margin.left + stringOffset*(stringCount - 1)} y1={margin.top + index*fretHeight} y2={margin.top + index*fretHeight} style={line}/>)\r\n        }\r\n        return frets;\r\n    }\r\n\r\n    function _generateChordDisplay(chord, nutLocation = 0) {\r\n        let data = [];\r\n        if(nutLocation !== 0) {\r\n            //add fret # next t highest finger\r\n            data.push(<text style={subtext} x={margin.left + stringOffset*5.7} y={margin.top + fretHeight/1.66}>{nutLocation + 1}</text>)\r\n        }\r\n        for (let i = 0; i < stringCount; i++) {\r\n            let position = chord.fingering[i] - nutLocation;\r\n\r\n            if(position >= 1) {\r\n                data.push(<circle r={circleRadius} cx={(margin.left + i * stringOffset)} cy={margin.top + position * fretHeight - fretHeight/2} style={circle}/>)\r\n            } else {\r\n                let symbol = position === -1 ? \"x\" : \"o\";\r\n                data.push(<text width={12} height={14} x={i * stringOffset + margin.left} y={margin.top - 14}/*  fill={\"#000000\"} */ textAnchor=\"middle\" style={title}>{symbol}</text>)\r\n            }\r\n        }\r\n\r\n        return data;\r\n    }\r\n\r\n    let lines = _generateLines();\r\n    let frets = _generateFrets();\r\n    let lowestString = 24;\r\n    let highestString = -1;\r\n    chordData.fingering.forEach(e => {\r\n        if (e < lowestString && e > 0) lowestString = e;\r\n        if (e > highestString) highestString = e;\r\n    })\r\n\r\n    const diff = highestString - lowestString;\r\n    const nutLocation = lowestString + diff < 4 ? 0 : lowestString - 1; \r\n    \r\n    let fingerPlacement = _generateChordDisplay(chordData, nutLocation);\r\n\r\n    return (<svg className=\"diagram\" viewBox={\"0 0 \"+((stringOffset*(stringCount-1)) + margin.left + margin.right)+\" \"+((fretHeight*fretsDisplayed) + margin.top + margin.bottom)}>\r\n        <text className=\"name\" x={((stringOffset*(stringCount-1)) + margin.left + margin.right)/2} y={margin.top / 2} textAnchor=\"middle\" style={title}>{chordData.name}</text>\r\n        <line x1={margin.left - 5} x2={margin.left + stringOffset*(stringCount - 1) + 5} y1={margin.top} y2={margin.top} style={nut}/>\r\n        {lines}\r\n        {frets}\r\n        {fingerPlacement}\r\n    </svg>)\r\n}","import { NOTES, STANDARD_TUNING } from \"../constants\";\r\n\r\nconst fretsDisplayed = 13;\r\nconst margin = {top:50,bottom:50, left:50, right:50};\r\nconst fretheight = 46;\r\nconst stringCount = 6;\r\nconst stringOffset = 25;\r\nconst circleRadius = 12;\r\n\r\nconst title = {\r\n    fontWeight:500\r\n}\r\n\r\nconst circle = {\r\n    fill:\"#212121\"\r\n}\r\n\r\nconst rootCircle = {\r\n    fill:\"#E75915\"\r\n}\r\n\r\nconst subtext = {\r\n    fontWeight:500,\r\n    fill:\"#fff\"\r\n}\r\n\r\nconst line = {\r\n    stroke:\"#333333\",\r\n    strokeWidth:2\r\n}\r\n\r\nconst nut = {\r\n    stroke:\"#000000\",\r\n    strokeWidth:7\r\n}\r\n\r\nconst halfnut = {\r\n    stroke:\"#323232\",\r\n    strokeWidth:4\r\n}\r\n\r\nexport default function ScaleDiagram({notes, ommits, tuning = STANDARD_TUNING}) {\r\n    const lines = generateLines();\r\n    const dots = generateDots();\r\n    const numbers = generateNumbers();\r\n\r\n\r\n    function generateLines() {\r\n        let lines = [];\r\n        for (let i = 1; i < fretsDisplayed + 1; i++) {\r\n            lines.push(<line style={line} x1={margin.left + (i*fretheight)} x2={margin.left + (i*fretheight)} y1={margin.top} y2={margin.top + stringOffset * (stringCount - 1)} />)\r\n        }\r\n        \r\n        for (let i = 0; i < stringCount; i++) {\r\n            lines.push(<line style={line} x1={margin.left} x2={margin.left + fretsDisplayed*fretheight} y1={margin.top + i * stringOffset} y2={margin.top + i * stringOffset}/>)    \r\n        }\r\n        lines.push(<line style={nut} x1={margin.left} x2={margin.left} y1={margin.top - 2} y2={margin.top + (stringOffset * (stringCount - 1)) + 2} />);\r\n        lines.push(<line style={halfnut} x1={margin.left + fretheight * 12} x2={margin.left + fretheight * 12} y1={margin.top - 2} y2={margin.top + (stringOffset * (stringCount - 1)) + 2} />);\r\n        return lines;\r\n    }\r\n\r\n    function generateDots() {\r\n        if(!tuning || !notes) return [];\r\n        let dots = [];\r\n        for (let string = 0; string < stringCount; string++) {\r\n            const base = tuning[(stringCount - 1) - string];\r\n            for (let fret = 0; fret < fretsDisplayed; fret++) {\r\n                let note = (base + fret) % 12;\r\n                if (notes.includes(note) && !ommits.includes(notes.indexOf(note))) {\r\n                    if (fret === 0) {\r\n                        dots.push(<circle r={circleRadius} cx={(margin.left - fretheight/2.8)} cy={margin.top + string * stringOffset} style={note === notes[0] ? rootCircle : circle}/>);\r\n                        dots.push(<text x={(margin.left - fretheight/2.8)} y={margin.top + string * stringOffset + 5} textAnchor={\"middle\"} style={subtext}>{NOTES[note].names[0]}</text>);\r\n                    } else {\r\n                        dots.push(<circle r={circleRadius} cx={(margin.left + fret * fretheight - fretheight/2)} cy={margin.top + string * stringOffset} style={note === notes[0] ? rootCircle : circle}/>)\r\n                        dots.push(<text x={(margin.left + fret * fretheight - fretheight/2)} y={margin.top + string * stringOffset + 5} textAnchor={\"middle\"} style={subtext}>{NOTES[note].names[0]}</text>);\r\n                    }\r\n                }\r\n            }\r\n            \r\n        }\r\n        return dots\r\n    }\r\n\r\n    function generateNumbers() {\r\n        let numbers = [];\r\n        const nums = [3,5,7,9,12];\r\n\r\n        nums.forEach(n => {\r\n            numbers.push(<text textAnchor={\"middle\"} x={margin.left + (fretheight * n) - fretheight/2} y={margin.top / 2} >{n}</text>);\r\n        })\r\n\r\n        return numbers;\r\n    }\r\n\r\n    return <svg viewBox={\"0 0 \"+(margin.left + (fretheight * fretsDisplayed) + margin.right)+\" \"+(margin.top + (stringOffset * (stringCount - 1)) + margin.bottom)}  /* width={margin.left + (fretheight * fretsDisplayed) + margin.right} height={margin.top + (stringOffset * (stringCount - 1)) + margin.bottom} */>\r\n        {/* <rect width={margin.left+fretheight * fretsDisplayed+margin.right} height={margin.top+stringOffset * (stringCount - 1)+margin.bottom}  style={{fill:\"#888\"}}/> */}\r\n        <rect y={margin.top} x={margin.left} width={fretheight * fretsDisplayed} height={stringOffset * (stringCount - 1)}  style={{fill:\"#fff\"}}/>\r\n        {lines}\r\n        {dots}\r\n        {numbers}\r\n    </svg>\r\n}","import { useEffect, useState } from \"react\"\r\nimport { CHORD_TYPES, NOTES, SCALE_FAMILIES, STANDARD_TUNING } from \"../constants\";\r\nimport { Scale } from \"../objects/Scale\";\r\nimport { getDiagramsForChord } from \"../util/TheoryUtils.ts\";\r\nimport \"../stylesheets/explorer.scss\";\r\nimport Diagram from \"../components/Diagram\";\r\nimport ScaleDiagram from \"../components/ScaleDiagram\";\r\n\r\nexport default function ScaleExplorer() {\r\n    const [scale, setScale] = useState();\r\n    const [family, setFamily] = useState(SCALE_FAMILIES[0]);\r\n    const [root, setRoot] = useState(0);\r\n    const [mode, setMode] = useState(0);\r\n    const [ommits, setOmmits] = useState([]);\r\n    const [notesWithOmmits, setNotesWithOmmits] = useState([])\r\n\r\n    const [triads, setTriads] = useState([]);\r\n    const [sevenths, setSevenths] = useState([]);\r\n    const [ninths, setNinths] = useState([]);\r\n\r\n    const [diagrams, setDiagrams] = useState([]);\r\n\r\n    useEffect(()=> {\r\n        updateScale();\r\n    }, [family, root, mode])\r\n\r\n    useEffect(()=> {\r\n        if(scale) {\r\n            setTriads(scale.getChordsOfType(CHORD_TYPES.triad));\r\n            setSevenths(scale.getChordsOfType(CHORD_TYPES.seventh));\r\n            setNinths(scale.getChordsOfType(CHORD_TYPES.ninth));\r\n        }\r\n    }, [scale])\r\n\r\n    function updateScale() {\r\n        let s = new Scale(root, family, mode);\r\n        setScale(s);\r\n    }\r\n\r\n    function toggleOmmit(n) {\r\n        let o = [...ommits];\r\n        let i = o.indexOf(n);\r\n        if (i === -1) {\r\n            o.push(n);\r\n        } else {\r\n            o.splice(i,1);\r\n        }\r\n        setOmmits(o);\r\n        console.log(ommits);\r\n    }\r\n\r\n    async function getDiagrams(chord) {\r\n        const d = await getDiagramsForChord(chord);\r\n        console.log(\"diagrams:\", d);\r\n        setDiagrams(d);\r\n    }\r\n\r\n    \r\n\r\n    return <div className=\"page\">\r\n        <div className=\"explorer\">\r\n            <div className=\"input\">\r\n                <label>\r\n                    Root: <br/>\r\n                    <select onChange={e=>setRoot(e.target.value)}>\r\n                        {\r\n                            NOTES.map((note, i) => <option key={i+\"n\"} value={i}>{note.names[0]}</option>)\r\n                        }\r\n                    </select>\r\n                </label>\r\n                <label>\r\n                    Scale Type:<br/> \r\n                    <select onChange={e=>setFamily(SCALE_FAMILIES[e.target.value])}>\r\n                        {\r\n                            SCALE_FAMILIES.map((fam, i) => <option key={i+\"f\"} value={i}>{fam.name}</option>)\r\n                        }\r\n                    </select>\r\n                </label>\r\n                <label>\r\n                    Scale Type:<br/> \r\n                    <select onChange={e=>setMode(e.target.value)}>\r\n                        {\r\n                            family?.modes?.map((mode, i) => <option key={i+\"m\"} value={i}>{mode}</option>)\r\n                        }\r\n                    </select>\r\n                </label>\r\n            </div>\r\n            <div className=\"scaleNotes\">\r\n                {\r\n                    scale?.notes?.map((n, i) => <span key={\"ommit\"+i}className={ommits.includes(i) ? \"ommit\" : \"\"} onClick={()=>toggleOmmit(i)}>{NOTES[n].names[0]}</span>)\r\n                }\r\n            </div>\r\n            <div className=\"chords\">\r\n                <h1>Triads</h1>\r\n                <div className=\"repeater\">\r\n                {\r\n                    triads?.map((e,i) => ommits.includes(i) ? <></> : <button key={i+\"b3\"} onClick={()=>getDiagrams(e)}>\r\n                        {e.name}\r\n                        <span className=\"notes\">{e.notes.map((n,j) => <span key={j+\"3\"+i} className=\"note\">{NOTES[n].names[0]}</span>)}</span>\r\n                    </button>)\r\n                }\r\n                </div>\r\n                <h1>Sevenths</h1>\r\n                <div className=\"repeater\">\r\n                {\r\n                    sevenths?.map((e,i) => ommits.includes(i) ? <></> : <button key={i+\"b7\"} onClick={()=>getDiagrams(e)}>\r\n                        {e.name}\r\n                        <span className=\"notes\">{e.notes.map((n,j) => <span key={j+\"7\"+i} className=\"note\">{NOTES[n].names[0]}</span>)}</span>\r\n                    </button>)\r\n                }\r\n                </div>\r\n                <h1>Ninths</h1>\r\n                <div className=\"repeater\">\r\n                {\r\n                    ninths?.map((e,i) => ommits.includes(i) ? <></> : <button key={i+\"b9\"} onClick={()=>getDiagrams(e)}>\r\n                        {e.name}\r\n                        <span className=\"notes\">{e.notes.map((n,j) => <span key={j+\"9\"+i} className=\"note\">{NOTES[n].names[0]}</span>)}</span>\r\n                    </button>)\r\n                }\r\n                </div>\r\n            </div>\r\n            <div className=\"diagrams\">\r\n               {diagrams.map((e,i)=> <Diagram key={i+\"di\"} data={e}/>)}\r\n            </div>\r\n            <div className=\"scaleDiagram\">\r\n                {scale && <ScaleDiagram tuning={STANDARD_TUNING} ommits={ommits} notes={scale.notes}/>}\r\n            </div>\r\n        </div>\r\n    </div>\r\n}","import logo from './logo.svg';\nimport Route, {Router} from './Router';\nimport ScaleExplorer from './pages/ScaleExplorer';\nimport './App.css';\nimport \"./stylesheets/colors.scss\";\nimport \"./stylesheets/page.scss\";\nimport ScaleDiagram from './components/ScaleDiagram';\nimport { Scale } from './objects/Scale';\nimport { SCALE_FAMILIES } from './constants';\n\nfunction App() {\n  return <Router>\n    <Route path=\"/\"><ScaleExplorer/></Route>\n    <Route path=\"/test\"><div className=\"page\"><ScaleDiagram notes={new Scale(0, SCALE_FAMILIES[0]).notes}/></div></Route>\n  </Router>;\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}