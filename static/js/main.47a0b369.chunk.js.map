{"version":3,"sources":["components/Popup.js","components/PopupContext.js","constants.js","util/NamingUtils.js","objects/Scale.js","components/ScaleDiagram.js","util/TheoryUtils.ts","logic/ChordDiagramLogic.ts","components/ChordDiagram.js","components/ChordTab.js","components/ProgressionsTab.js","pages/ScaleExplorer.js","App.js","reportWebVitals.js","index.js"],"names":["Popup","children","popupContext","useContext","PopupContext","className","onClick","closePopup","createContext","PopupProvider","useState","popup","setPopup","Provider","value","createPopup","contents","style","MAJOR","MINOR","romanNumerals","SCALE_FAMILIES","name","chordTypes","intervals","modes","CHORD_TYPES","NOTES","names","progressions","STANDARD_TUNING","getChordName","notes","current","naming","lastIndex","i","length","next","ext","extensions","seventh","getNameFromMap","res","semitones","getSemitonesBetweenNotes","push","getIntervalsBetweenNotesOfChord","a","b","Scale","root","family","offset","this","init","nts","Number","index","startIndex","indices","noots","getNote","type","result","getChord","margin","fretheight","stringOffset","ScaleDiagram","ommits","tuning","lines","fretsDisplayed","x1","x2","y1","y2","generateLines","dots","string","base","stringCount","fret","note","includes","indexOf","r","cx","cy","x","y","textAnchor","generateDots","numbers","forEach","n","circleRadius","generateNumbers","viewBox","width","height","class","getNoteOnString","getDiagramsForChord","chord","options","allowInversions","mutedMustBeConnected","maxMutedCount","mutedNotInCenter","possibleIndices","getFretBoardPositionsOfChord","fingerings","set","Set","add","recursivelyGetBlock","element","removeDuplicates","filter","e","validateFingering","fingering","array","val","v","Object","values","str","has","possibleIndicesPerString","currentString","startFret","currentSet","possibilities","currentPossibilities","currentStringNotes","possibleIndex","clone","entry","chordNotes","fingers","muted","bassFound","bassIsRoot","mutedAreConnected","allNotes","left","right","fretHeight","title","fontWeight","subtext","line","strokeWidth","nut","circle","ChordDiagram","data","k","chordData","_generateLines","frets","_generateFrets","lowestString","highestString","fingerPlacement","nutLocation","position","symbol","_generateChordDisplay","ChordTab","state","ScaleContext","getDiagrams","diagrams","console","log","map","d","triads","degrees","j","sevenths","ninths","ProgressionsTab","p","c","ScaleExplorer","scale","setScale","setFamily","setRoot","mode","setMode","setOmmits","setTriads","setSevenths","setNinths","setDegrees","tabs","content","tab","setTab","useEffect","s","deg","shift","getChordsOfType","defaultValue","onChange","target","o","splice","toggleOmmit","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.47a0b369.chunk.js","sourcesContent":["import React , { useContext } from \"react\";\nimport \"../stylesheets/popup.scss\"\nimport { PopupContext } from \"./PopupContext\";\n\nexport default function Popup({children}) {\n    const popupContext = useContext(PopupContext);\n\n    return (\n        <div className=\"popup\">\n            <div className=\"contents\">\n                {children}\n            </div>\n            <div className=\"backdrop\" onClick={popupContext.closePopup}></div>\n        </div>\n    )\n}","import { useState, createContext } from \"react\"\nimport Popup from \"./Popup\";\n\nexport const PopupContext = createContext();\nexport const PopupProvider = ({children}) => {\n    const [popup, setPopup] = useState();\n\n    function createPopup(contents, style = {}) {\n        setPopup(<Popup style={style}>{contents}</Popup>);\n    }\n\n    function closePopup() {\n        setPopup();\n    }\n\n    return <PopupContext.Provider value={{\n        closePopup:closePopup,\n        createPopup:createPopup,\n        popup:popup    \n    }}>\n        {children}\n    </PopupContext.Provider>\n}","export const MAJOR = \"MAJOR\";\r\nexport const MINOR = \"MINOR\";\r\nexport const DIMINISHED = \"DIMINISHED\";\r\nexport const AUGMENTED = \"AUGMENTED\"; \r\n\r\nexport const romanNumerals = [\"I\", \"II\", \"III\", \"IV\", \"V\", \"VI\", \"VII\", \"IX\", \"X\"];\r\n\r\nexport const SCALE_FAMILIES = [\r\n    {name:\"Major\", chordTypes:[MAJOR, MINOR, MINOR, MAJOR, MAJOR, MINOR, DIMINISHED] ,intervals:[2,2,1,2,2,2,1], modes:[\"Ionian (Major)\", \"Dorian\", \"Phrygian\", \"Lydian\", \"Mixolydian\", \"Aeolian (Natural Minor)\", \"Locrian\"]},\r\n    {name:\"Melodic Minor\", intervals:[2,1,2,2,2,2,1], modes:[\"Melodic Minor\", \"Dorian b2\", \"Lydian Aug.\", \"Lydian dom.\", \"Aeo. dom.\", \"Half diminished\", \"Alt.\"]},\r\n    {name:\"Harmonic Minor\", intervals:[2,1,2,2,1,3,1], modes:[\"Harmonic Minor\", \"Locrian nat. 6\", \"Major #5\", \"Doroam #4\", \"Phrygian dom.\", \"Lydian #2\", \"Alt. dom. bb7\"]},\r\n    {name:\"Harmonic Major\", intervals:[2,2,1,2,1,3,1], modes:[\"Harmonic Major\", \"Dorian b5\", \"Phrygian b4\", \"Lydian b3\", \"Mixo. b2\", \"Lydian Augmented #2\", \"Locrian bb7\"]},\r\n    {name:\"Diminished\", intervals:[2,1,2,1,2,1,2,1], modes:[\"Diminished\", \"Inverted Diminished\"]},\r\n    {name:\"Whole Tone\", intervals:[2,2,2,2,2,2], modes:[\"Whole Tone\"]},\r\n    {name:\"Augmented\", intervals:[3,1,3,1,3,1], modes:[\"Augmented\", \"Inverted Augmented\"]}\r\n]\r\n\r\nexport const CHORD_TYPES = {\r\n    triad:[0,2,4],\r\n    seventh:[0,2,4,6],\r\n    ninth:[0,2,4,6,8]\r\n}\r\n\r\nexport const NOTES = [\r\n    {names: [\"A\"]},\r\n    {names: [\"A#\", \"Bb\"]},\r\n    {names: [\"B\", \"Cb\"]},\r\n    {names: [\"C\", \"B#\"]},\r\n    {names: [\"C#\", \"Db\"]},\r\n    {names: [\"D\"]},\r\n    {names: [\"D#\", \"Eb\"]},\r\n    {names: [\"E\", \"Fb\"]},\r\n    {names: [\"F\", \"E#\"]},\r\n    {names: [\"F#\", \"Gb\"]},\r\n    {names: [\"G\"]},\r\n    {names: [\"G#\", \"Ab\"]}\r\n]\r\n\r\nexport const progressions = [\r\n    [1, 4, 0],\r\n    [0, 5, 3, 4],\r\n    [1, 4, 0],\r\n    [0, 5, 1, 4],\r\n    [0, 4, 5, 3],\r\n    [0, 3, 5, 4],\r\n    [0, 2, 3, 4],\r\n    [0, 3, 0, 4],\r\n    [0, 3, 1, 4]\r\n]\r\n\r\nexport const STANDARD_TUNING = [7, 0, 5, 10, 2, 7];","import naming from \"../json/naming.json\";\r\nimport extensions from \"../json/extensions.json\";\r\n\r\nexport function getChordName(notes) {\r\n    let intervals = getIntervalsBetweenNotesOfChord(notes);\r\n    return getNameFromMap(intervals);\r\n}\r\n\r\nfunction getSemitonesBetweenNotes(a, b) {\r\n    if(a < b) {\r\n        return b - a;\r\n    } else {\r\n        return b + (12 - a);\r\n    }\r\n}\r\n\r\nfunction getIntervalsBetweenNotesOfChord(notes) {\r\n    let res = [];\r\n    for (let i = 1; i < notes.length; i++) {\r\n        let semitones = getSemitonesBetweenNotes(notes[0], notes[i]);\r\n        res.push(semitones);\r\n    }\r\n\r\n    return res;\r\n}\r\n\r\nfunction getNameFromMap(intervals) {\r\n    let current = naming;\r\n    let lastIndex = 0;\r\n    let val = \"\";\r\n    for(let i = 0; i < intervals.length; i++) {\r\n        let interval = intervals[i];\r\n        let next = current[interval];\r\n        if(!next) {\r\n            lastIndex = i;\r\n            break;\r\n        }\r\n        current = next;\r\n    }\r\n\r\n    if(lastIndex === 0) {\r\n        return current.value;\r\n    }\r\n\r\n    var ext = extensions.seventh[intervals[lastIndex]]\r\n    \r\n\r\n    return current.value + ext;\r\n}","import { NOTES } from \"../constants\";\r\nimport { getChordName } from \"../util/NamingUtils\";\r\n\r\nexport class Scale{\r\n    constructor(root, family, offset = 0) {\r\n        this.root = root;\r\n        this.family = family;\r\n        this.offset = offset;\r\n        this.notes = []\r\n        this.init();\r\n    }\r\n\r\n    init() {\r\n        let nts = [];\r\n        nts[0] = Number(this.root);\r\n        for (let i = this.offset; i < this.family.intervals.length; i++) {\r\n            nts.push((Number(nts[nts.length - 1]) + Number(this.family.intervals[i])) % 12);\r\n        }\r\n\r\n        for (let i = 0; i < this.offset; i++) {\r\n            nts.push((Number(nts[nts.length - 1]) + Number(this.family.intervals[i])) % 12);\r\n        }\r\n\r\n        this.notes = nts;\r\n    }\r\n\r\n    //get note by index, including out of range indices. this also ignores the last (doubled) note in the scale\r\n    getNote(index) {\r\n        return this.notes[index % (this.notes.length - 1)];\r\n    }\r\n\r\n    getChord(startIndex, indices) {\r\n        let noots = [];\r\n        for (let i = 0; i < indices.length; i++) {\r\n            const index = indices[i];\r\n            noots.push(this.getNote(index + startIndex));\r\n        }\r\n\r\n        return {name:NOTES[this.notes[startIndex]].names[0] + getChordName(noots), notes: noots};\r\n    }\r\n\r\n    getChordsOfType(type) {\r\n        let result = [];\r\n        for (let i = 0; i < this.notes.length - 1; i++) {\r\n            result.push(this.getChord(i, type));\r\n        }\r\n\r\n        return result;\r\n    }\r\n}","import { NOTES, STANDARD_TUNING } from \"../constants\";\r\n\r\nconst fretsDisplayed = 13;\r\nconst margin = {top:30,bottom:30, left:10, right:10};\r\nconst fretheight = 46;\r\nconst stringCount = 6;\r\nconst stringOffset = 25;\r\nconst circleRadius = 12;\r\n\r\nconst title = {\r\n    fontWeight:500\r\n}\r\n\r\nconst circle = {\r\n    fill:\"#212121\"\r\n}\r\n\r\nconst rootCircle = {\r\n    fill:\"#E75915\"\r\n}\r\n\r\nconst subtext = {\r\n    fontWeight:500,\r\n    fill:\"#fff\"\r\n}\r\n\r\nconst line = {\r\n    stroke:\"#333333\",\r\n    strokeWidth:2\r\n}\r\n\r\nconst nut = {\r\n    stroke:\"#000000\",\r\n    strokeWidth:7\r\n}\r\n\r\nconst halfnut = {\r\n    stroke:\"#323232\",\r\n    strokeWidth:4\r\n}\r\n\r\nexport default function ScaleDiagram({notes, ommits, tuning = STANDARD_TUNING}) {\r\n    const lines = generateLines();\r\n    const dots = generateDots();\r\n    const numbers = generateNumbers();\r\n\r\n\r\n    function generateLines() {\r\n        let lines = [];\r\n        for (let i = 1; i < fretsDisplayed + 1; i++) {\r\n            lines.push(<line x1={margin.left + (i*fretheight)} x2={margin.left + (i*fretheight)} y1={margin.top} y2={margin.top + stringOffset * (stringCount - 1)} />)\r\n        }\r\n        \r\n        for (let i = 0; i < stringCount; i++) {\r\n            lines.push(<line x1={margin.left} x2={margin.left + fretsDisplayed*fretheight} y1={margin.top + i * stringOffset} y2={margin.top + i * stringOffset}/>)    \r\n        }\r\n        lines.push(<line className=\"nut\" x1={margin.left} x2={margin.left} y1={margin.top - 2} y2={margin.top + (stringOffset * (stringCount - 1)) + 2} />);\r\n        lines.push(<line className=\"halfnut\" x1={margin.left + fretheight * 12} x2={margin.left + fretheight * 12} y1={margin.top - 2} y2={margin.top + (stringOffset * (stringCount - 1)) + 2} />);\r\n        return lines;\r\n    }\r\n\r\n    function generateDots() {\r\n        if(!tuning || !notes) return [];\r\n        let dots = [];\r\n        for (let string = 0; string < stringCount; string++) {\r\n            const base = tuning[(stringCount - 1) - string];\r\n            for (let fret = 0; fret < fretsDisplayed; fret++) {\r\n                let note = (base + fret) % 12;\r\n                if (notes.includes(note) && !ommits.includes(notes.indexOf(note))) {\r\n                    if (fret === 0) {\r\n                        dots.push(<circle r={circleRadius} cx={(margin.left - fretheight/2.8)} cy={margin.top + string * stringOffset} className={note === notes[0] ? \"rootCircle\" : \"circle\"}/>);\r\n                        dots.push(<text className=\"subtext\" x={(margin.left - fretheight/2.8)} y={margin.top + string * stringOffset + 3} textAnchor={\"middle\"}>{NOTES[note].names[0]}</text>);\r\n                    } else {\r\n                        dots.push(<circle r={circleRadius} cx={(margin.left + fret * fretheight - fretheight/2)} cy={margin.top + string * stringOffset} className={note === notes[0] ? \"rootCircle\" : \"circle\"}/>)\r\n                        dots.push(<text className=\"subtext\" x={(margin.left + fret * fretheight - fretheight/2)} y={margin.top + string * stringOffset + 3} textAnchor={\"middle\"}>{NOTES[note].names[0]}</text>);\r\n                    }\r\n                }\r\n            }\r\n            \r\n        }\r\n        return dots\r\n    }\r\n\r\n    function generateNumbers() {\r\n        let numbers = [];\r\n        const nums = [1,3,5,7,9,12];\r\n\r\n        nums.forEach(n => {\r\n            numbers.push(<text textAnchor={\"middle\"} x={margin.left + (fretheight * n) - fretheight/2} y={margin.top + stringOffset*6 + margin.bottom / 10} className=\"fretNumber\">{n}</text>);\r\n            \r\n            if(n === 12) {\r\n                numbers.push(<circle r={circleRadius/2} className=\"boardDot\" cx={margin.left + (fretheight * n) - fretheight/2} cy={margin.top + stringOffset*1.5}></circle>)\r\n                numbers.push(<circle r={circleRadius/2} className=\"boardDot\" cx={margin.left + (fretheight * n) - fretheight/2} cy={margin.top + stringOffset*3.5}></circle>)\r\n            } else {\r\n                numbers.push(<circle r={circleRadius/2} className=\"boardDot\" cx={margin.left + (fretheight * n) - fretheight/2} cy={margin.top + stringOffset*2.5}></circle>)\r\n            }\r\n        })\r\n\r\n        return numbers;\r\n    }\r\n\r\n    return <svg viewBox={\"0 0 \"+(margin.left + (fretheight * fretsDisplayed) + margin.right)+\" \"+(margin.top + (stringOffset * (stringCount - 1)) + margin.bottom)}  /* width={margin.left + (fretheight * fretsDisplayed) + margin.right} height={margin.top + (stringOffset * (stringCount - 1)) + margin.bottom} */>\r\n        {/* <rect width={margin.left+fretheight * fretsDisplayed+margin.right} height={margin.top+stringOffset * (stringCount - 1)+margin.bottom}  style={{fill:\"#888\"}}/> */}\r\n        <rect y={margin.top} x={margin.left} width={fretheight * fretsDisplayed} height={stringOffset * (stringCount - 1)}  class=\"background\"/>\r\n        {numbers}\r\n        {lines}\r\n        {dots}\r\n    </svg>\r\n}","import { STANDARD_TUNING } from \"../constants\";\r\n\r\nexport function getNoteOnString(fret:number, string:number, tuning:number[] = STANDARD_TUNING) : number {\r\n    return (tuning[string] + fret) % 12;\r\n}","import { STANDARD_TUNING } from \"../constants\";\r\nimport { getNoteOnString } from \"../util/TheoryUtils\";\r\n\r\nconst BLOCK_SIZE = 3;\r\n\r\nexport async function getDiagramsForChord(\r\n    chord: { name: any; notes: number[]}, \r\n    tuning: number[], \r\n    options:{\r\n        allowInversions: boolean,\r\n        mutedMustBeConnected: boolean,\r\n        maxMutedCount:number,\r\n        mutedNotInCenter:boolean\r\n    } = {allowInversions:false,mutedMustBeConnected:true, maxMutedCount:3, mutedNotInCenter:true}) \r\n    : Promise<{name:string, fingering: Array<number>}[]> {\r\n    const possibleIndices = getFretBoardPositionsOfChord(chord.notes, tuning);\r\n\r\n    let fingerings : number[][] = [];\r\n    for (let i = 0; i < (12 - BLOCK_SIZE); i++) {\r\n        const set: Set<number[]> = new Set();\r\n        set.add([-1,-1,-1,-1,-1,-1])\r\n        const fings = recursivelyGetBlock(0, i, set, possibleIndices);\r\n        // eslint-disable-next-line no-loop-func\r\n        fings.forEach(element => {\r\n            fingerings.push(element);\r\n        });\r\n    }\r\n\r\n    fingerings = removeDuplicates(fingerings);\r\n    fingerings = fingerings.filter(e => validateFingering(e, tuning, chord.notes, options));\r\n\r\n    let result:{name:string, fingering: Array<number>}[] = [];\r\n    fingerings.forEach(e => {\r\n        result.push({name:chord.name, fingering: e});\r\n    })\r\n\r\n    return result;\r\n}\r\n\r\nfunction removeDuplicates(array: number[][]): number[][] {\r\n    let res : number[][] = [];\r\n    let set : Set<string> = new Set();\r\n\r\n    for(let val of array) {\r\n        const v = Object.values(val);\r\n\r\n        let str = \"\";\r\n        v.forEach(e=>str += e);\r\n\r\n        if(!set.has(str)) {\r\n            set.add(str);\r\n            res.push(v);\r\n        }\r\n    }\r\n\r\n    return res;\r\n}\r\n\r\nfunction getFretBoardPositionsOfChord(notes : number[], tuning : number[] = STANDARD_TUNING) : number[][] {\r\n    let possibleIndicesPerString : number[][] = [];\r\n    tuning.forEach(e=>possibleIndicesPerString.push([-1]));\r\n\r\n    //check all frets\r\n    for (let fret = 0; fret < 12; fret++) {\r\n        //check all strings\r\n        for (let string = 0; string < tuning.length; string++) {\r\n            const note = getNoteOnString(fret, string, tuning);\r\n            if (notes.includes(note)) {\r\n                possibleIndicesPerString[string].push(fret);\r\n            }\r\n        }\r\n    }\r\n\r\n    return possibleIndicesPerString;\r\n}\r\n\r\nfunction recursivelyGetBlock(currentString: number, startFret: number, currentSet: Set<number[]>, possibilities: number[][]) : Set<number[]> {\r\n    if (currentString === 6) return currentSet;\r\n    let currentPossibilities: number[] = [];\r\n    let currentStringNotes: number[] = possibilities[currentString];\r\n\r\n    for (let index of currentStringNotes) {\r\n        if ((index >= startFret && index - startFret < BLOCK_SIZE) || index <= 0) {\r\n            currentPossibilities.push(index);\r\n        }\r\n    }\r\n\r\n    let result: Set<number[]> = new Set();\r\n    for (let possibleIndex of currentPossibilities) {\r\n        let next:Set<number[]> = new Set();\r\n        currentSet.forEach(e => {\r\n            let clone = {...e};\r\n            next.add(clone);\r\n        });\r\n\r\n        next.forEach(entry => {\r\n            entry[currentString] = possibleIndex;\r\n        })\r\n\r\n        let nextResult = recursivelyGetBlock(currentString + 1, startFret, next, possibilities);\r\n        nextResult.forEach(e => result.add(e));\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nfunction validateFingering(fingering : number[], tuning:number[], chordNotes:number[], options:{allowInversions: boolean, mutedMustBeConnected: boolean, maxMutedCount:number, mutedNotInCenter:boolean}) : boolean {\r\n    const fingers = Object.values(fingering);\r\n    let muted = 0;\r\n    let bassFound = false;\r\n    let bassIsRoot = false;\r\n    let mutedAreConnected = true;\r\n    let allNotes:number[] = [];\r\n    for(let i = 0; i < fingers.length; i++) {\r\n        const note = getNoteOnString(fingers[i], i, tuning);\r\n        allNotes.push(note);\r\n        if(fingers[i] === -1) {\r\n            if ([2,3,4].includes(i) && options.mutedNotInCenter) {\r\n                return false;\r\n            }\r\n            if(muted > 0) {\r\n                //check if muted string is connected to other muted strings\r\n                let left = fingers[i - 1];\r\n                let right = i === fingers.length - 1 ? 0 : fingers[i + 1];\r\n                mutedAreConnected = left === -1 || right === -1;\r\n            }\r\n            muted += 1;\r\n        } else if(!bassFound) {\r\n            bassFound = true;\r\n            if(note === chordNotes[0]) {\r\n                bassIsRoot = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    //check if all notes are present in the current chord\r\n    chordNotes.forEach(n => {\r\n        if(!allNotes.includes(n)) {\r\n            return false;\r\n        }\r\n    })\r\n\r\n\r\n    return (muted <= options.maxMutedCount) && (options.allowInversions || bassIsRoot) && (mutedAreConnected || !options.mutedMustBeConnected);\r\n}","import React from \"react\";\r\nimport \"../stylesheets/chordDiagram.scss\";\r\n\r\nconst margin = {top:70,bottom:10, left:50, right:50};\r\nconst fretsDisplayed = 4;\r\nconst fretHeight = 46; \r\nconst stringCount = 6;\r\nconst stringOffset = 30;\r\nconst circleRadius = 12;\r\n\r\nconst title = {\r\n    fontWeight:500\r\n}\r\n\r\nconst subtext = {\r\n    fontWeight:500,\r\n    /* fill:\"#323232\" */\r\n}\r\n\r\nconst line = {\r\n    /* stroke:\"#000000\", */\r\n    strokeWidth:2\r\n}\r\n\r\nconst nut = {\r\n    /* stroke:\"#000000\", */\r\n    strokeWidth:3\r\n}\r\n\r\nconst circle = {\r\n    /* fill:\"#212121\" */\r\n}\r\n\r\nexport default function ChordDiagram({data, k}) {\r\n    const chordData = data;\r\n    if(!chordData || !chordData.fingering) return \"\";\r\n\r\n    chordData.fingering = Object.values(chordData.fingering)\r\n\r\n    function _generateLines() {\r\n        let lines = [];\r\n        for (let i = 0; i < stringCount; i++) {\r\n            let x = margin.left + i * stringOffset;\r\n            lines.push(<line key={\"line\"+lines.length} x1={x} x2={x} y1={margin.top} y2={margin.top + (fretHeight*fretsDisplayed)} style={line}/>)\r\n        }\r\n        return lines;\r\n    }\r\n\r\n    function _generateFrets() {\r\n        let frets = [];\r\n        for (let index = 1; index <= fretsDisplayed; index++) {\r\n            frets.push(<line key={\"fret\"+frets.length} x1={margin.left} x2={margin.left + stringOffset*(stringCount - 1)} y1={margin.top + index*fretHeight} y2={margin.top + index*fretHeight} style={line}/>)\r\n        }\r\n        return frets;\r\n    }\r\n\r\n    function _generateChordDisplay(chord, nutLocation = 0) {\r\n        let data = [];\r\n        if(nutLocation !== 0) {\r\n            //add fret # next t highest finger\r\n            data.push(<text key={\"q\"+data.length} style={subtext} x={margin.left + stringOffset*5.7} y={margin.top + fretHeight/1.66}>{nutLocation + 1}</text>)\r\n        }\r\n        for (let i = 0; i < stringCount; i++) {\r\n            let position = chord.fingering[i];\r\n\r\n            if(position > 0) {\r\n                data.push(<circle key={\"q\"+data.length} r={circleRadius} cx={(margin.left + i * stringOffset)} cy={margin.top + (position - nutLocation) * fretHeight - fretHeight/2} style={circle}/>)\r\n            } else {\r\n                let symbol = \"\";\r\n                switch(position) {\r\n                    case 0:\r\n                        symbol = \"o\";\r\n                        break;\r\n                    case -1:\r\n                        symbol = \"x\";\r\n                        break;\r\n                    default:\r\n                        break;\r\n                }\r\n\r\n                data.push(<text width={12} height={14} x={i * stringOffset + margin.left} y={margin.top - 14}/*  fill={\"#000000\"} */ textAnchor=\"middle\" style={title}>{symbol}</text>)\r\n            }\r\n        }\r\n\r\n        return data;\r\n    }\r\n\r\n    let lines = _generateLines();\r\n    let frets = _generateFrets();\r\n    let lowestString = 24;\r\n    let highestString = -1;\r\n    chordData.fingering.forEach(e => {\r\n        if (e < lowestString && e > 0) lowestString = e;\r\n        if (e > highestString) highestString = e;\r\n    })\r\n\r\n    const diff = highestString - lowestString;\r\n    const nutLocation = lowestString + diff < 4 ? 0 : lowestString - 1; \r\n    \r\n    let fingerPlacement = _generateChordDisplay(chordData, nutLocation);\r\n\r\n    return (<svg key={k} className=\"chordDiagram\" viewBox={\"0 0 \"+((stringOffset*(stringCount-1)) + margin.left + margin.right)+\" \"+((fretHeight*fretsDisplayed) + margin.top + margin.bottom)}>\r\n        <text className=\"name\" x={((stringOffset*(stringCount-1)) + margin.left + margin.right)/2} y={margin.top / 2} textAnchor=\"middle\" style={title}>{chordData.name}</text>\r\n        <line x1={margin.left - 5} x2={margin.left + stringOffset*(stringCount - 1) + 5} y1={margin.top} y2={margin.top} style={nut}/>\r\n        {lines}\r\n        {frets}\r\n        {fingerPlacement}\r\n    </svg>)\r\n}","import {useContext} from 'react'\nimport { NOTES, romanNumerals } from \"../constants\";\nimport { getDiagramsForChord } from '../logic/ChordDiagramLogic';\nimport { ScaleContext } from \"../pages/ScaleExplorer\";\nimport ChordDiagram from './ChordDiagram';\nimport Diagram from './ChordDiagram';\nimport { PopupContext } from './PopupContext';\n\nexport default function ChordTab() {\n    const state = useContext(ScaleContext);\n    const popupContext = useContext(PopupContext);\n\n    async function getDiagrams(chord) {\n        let diagrams = await getDiagramsForChord(chord);\n        console.log(diagrams);\n\n        popupContext.createPopup(\n            <div className=\"center\">\n                {\n                    diagrams.map((d,i) => <ChordDiagram key={\"d\"+i} k={\"dia\"+i} data={d}/>)\n                }\n            </div>\n        );\n    }\n\n    return (\n    <div className=\"chords tab\">\n        <div className=\"repeater\">\n            <h3>Triads</h3>\n            <div className=\"chordelements\">\n                {\n                    state.triads?.map((e, i) => state.ommits.includes(i) ? <></> : <span className=\"chord\" key={i + \"b3\"} onClick={()=>getDiagrams(e)}>\n                        <h4 className={\"scaleDegree \" + state.degrees[i]}>{romanNumerals[i]}</h4>\n                        {e.name}\n                        <span className=\"notes\">{e.notes.map((n, j) =>\n                            <span key={j + \"3\" + i} className=\"note\">\n                                {NOTES[n].names[0]}\n                            </span>)}\n                        </span>\n                    </span>)\n                }\n            </div>\n        </div>\n        <div className=\"repeater\">\n            <h3>Sevenths</h3>\n            <div className=\"chordelements\">\n                {\n                    state.sevenths?.map((e, i) => state.ommits.includes(i) ? <></> : <span className=\"chord\" key={i + \"b7\"} onClick={()=>getDiagrams(e)}>\n                        <h4 className={\"scaleDegree \" + state.degrees[i]}>{romanNumerals[i]}7</h4>\n                        {e.name}\n                        <span className=\"notes\">{e.notes.map((n, j) =>\n                            <span key={j + \"7\" + i} className=\"note\">\n                                {NOTES[n].names[0]}\n                            </span>)}\n                        </span>\n                    </span>)\n                }\n            </div>\n        </div>\n        <div className=\"repeater\">\n            <h3>Ninths</h3>\n            <div className=\"chordelements\">\n                {\n                    state.ninths?.map((e, i) => state.ommits.includes(i) ? <></> : <span className=\"chord\" key={i + \"b9\"} onClick={()=>getDiagrams(e)}>\n                        <h4 className={\"scaleDegree \" + state.degrees[i]}>{romanNumerals[i]}9</h4>\n                        {e.name}\n                        <span className=\"notes\">{e.notes.map((n, j) =>\n                            <span key={j + \"9\" + i} className=\"note\">\n                                {NOTES[n].names[0]}\n                            </span>)}\n                        </span>\n                    </span>)\n                }\n            </div>\n        </div>\n    </div>)\n}","import {useContext} from 'react'\nimport { ScaleContext } from '../pages/ScaleExplorer'\nimport { progressions, romanNumerals } from \"../constants\";\n\nexport default function ProgressionsTab() {\n    const state = useContext(ScaleContext);\n\n    return (\n        <div className=\"progressions tab\">\n            <h1>Progressions</h1>\n            <div className=\"grid\">\n                {\n                    progressions.map((p,i) => \n                        <div key={p+i}className=\"progression\">\n                            {\n                                p.map((c,j) => \n                                    <span key={\"c\"+j}>\n                                        <h2>{state?.triads[c]?.name}</h2>\n                                        <h3 className={\"scaleDegree \"+state?.degrees[c]}>{romanNumerals[c]}</h3>\n                                    </span>    \n                                )\n                            }\n                        </div>    \n                    )\n                }\n            </div>\n        </div>\n    )\n}","import { useEffect, useState, createContext, useContext } from \"react\"\r\nimport { CHORD_TYPES, NOTES, progressions, romanNumerals, SCALE_FAMILIES, STANDARD_TUNING } from \"../constants\";\r\nimport { Scale } from \"../objects/Scale\";\r\nimport \"../stylesheets/explorer.scss\";\r\nimport ScaleDiagram from \"../components/ScaleDiagram\";\r\nimport ChordTab from \"../components/ChordTab\";\r\nimport ProgressionsTab from \"../components/ProgressionsTab\";\r\nimport { PopupContext } from \"../components/PopupContext\";\r\n\r\nexport const ScaleContext = createContext(null);\r\nexport default function ScaleExplorer() {\r\n    const [scale, setScale] = useState();\r\n    const [family, setFamily] = useState(SCALE_FAMILIES[0]);\r\n    const [root, setRoot] = useState(0);\r\n    const [mode, setMode] = useState(0);\r\n    const [ommits, setOmmits] = useState([]);\r\n\r\n    const [triads, setTriads] = useState([]);\r\n    const [sevenths, setSevenths] = useState([]);\r\n    const [ninths, setNinths] = useState([]);\r\n    const [degrees, setDegrees] = useState(family.chordTypes);\r\n\r\n    const tabs = [\r\n        { name: \"Chords\", content: <ChordTab /> },\r\n        { name: \"Progressions\", content: <ProgressionsTab /> }\r\n    ]\r\n    const [tab, setTab] = useState(tabs[0].content);\r\n\r\n    const popupContext = useContext(PopupContext);\r\n\r\n    useEffect(() => {\r\n        let s = new Scale(root, family, mode);\r\n        setScale(s);\r\n\r\n        let deg = [...family.chordTypes];\r\n        for (let i = 0; i < mode; i++) {\r\n            const element = deg.shift();\r\n            deg.push(element);\r\n        }\r\n        setDegrees(deg);\r\n    }, [family, root, mode])\r\n\r\n    useEffect(() => {\r\n        if (scale) {\r\n            setTriads(scale.getChordsOfType(CHORD_TYPES.triad));\r\n            setSevenths(scale.getChordsOfType(CHORD_TYPES.seventh));\r\n            setNinths(scale.getChordsOfType(CHORD_TYPES.ninth));\r\n        }\r\n    }, [scale])\r\n\r\n    function toggleOmmit(n) {\r\n        let o = [...ommits];\r\n        let i = o.indexOf(n);\r\n        if (i === -1) {\r\n            o.push(n);\r\n        } else {\r\n            o.splice(i, 1);\r\n        }\r\n        setOmmits(o);\r\n    }\r\n\r\n    return (\r\n        <div className=\"page\">\r\n            {popupContext.popup}\r\n            <div className=\"explorer\">\r\n                <div className=\"input\">\r\n                    <label>\r\n                        Root: <br />\r\n                        <select defaultValue={0} onChange={e => setRoot(e.target.value)}>\r\n                            {\r\n                                NOTES.map((note, i) => <option key={i + \"n\"} value={i}>{note.names[0]}</option>)\r\n                            }\r\n                        </select>\r\n                    </label>\r\n                    {/* <label>\r\n                            Scale Type:<br/> \r\n                            <select onChange={e=>setFamily(SCALE_FAMILIES[e.target.value])}>\r\n                            {\r\n                                SCALE_FAMILIES.map((fam, i) => <option key={i+\"f\"} value={i} selected={family.name === fam.name ? \"selected\":null}>{fam.name}</option>)\r\n                            }\r\n                            </select>\r\n                        </label> */}\r\n                    <label>\r\n                        Mode:<br />\r\n                        <select defaultValue={0} onChange={e => setMode(e.target.value)}>\r\n                            {\r\n                                family?.modes?.map((mode, i) => <option key={i + \"m\"} value={i} >{mode}</option>)\r\n                            }\r\n                        </select>\r\n                    </label>\r\n                </div>\r\n                <div className=\"scaleNotes\">\r\n                    {\r\n                        scale?.notes?.map((n, i) =>\r\n                            <span key={\"ommit\" + i} className={ommits.includes(i) ? \"ommit\" : \"\"} onClick={() => toggleOmmit(i)}>\r\n                                {NOTES[n].names[0]}\r\n                                <h3 className={\"scaleDegree \" + degrees[i]}>{romanNumerals[i % (scale.notes.length - 1)]}</h3>\r\n                            </span>)\r\n                    }\r\n                </div>\r\n                <div className=\"scaleDiagram\">\r\n                    {scale && <ScaleDiagram tuning={STANDARD_TUNING} ommits={ommits} notes={scale.notes} />}\r\n                </div>\r\n                <div className=\"tabselect\">\r\n                    {\r\n                        tabs.map((tab, index) => <button onClick={() => { setTab(tabs[index].content) }}>{tab.name}</button>)\r\n                    }\r\n                </div>\r\n                <div className=\"tabs\">\r\n                    {/* TODO: shorten this if possible */}\r\n                    <ScaleContext.Provider value={\r\n                        {\r\n                            scale: scale,\r\n                            setScale: setScale,\r\n                            family: family,\r\n                            setFamily: setFamily,\r\n                            root: root,\r\n                            setRoot: setRoot,\r\n                            mode: mode,\r\n                            setMode: setMode,\r\n                            ommits: ommits,\r\n                            setOmmits: setOmmits,\r\n                            triads: triads,\r\n                            setTriads: setTriads,\r\n                            sevenths: sevenths,\r\n                            setSevenths: setSevenths,\r\n                            ninths: ninths,\r\n                            setNinths: setNinths,\r\n                            degrees: degrees,\r\n                            setDegrees: setDegrees,\r\n                        }\r\n                    }>\r\n                        {tab}\r\n                    </ScaleContext.Provider>\r\n                </div>\r\n            </div>\r\n        </div>)\r\n}","import { PopupProvider } from './components/PopupContext';\nimport ScaleExplorer from './pages/ScaleExplorer';\nimport './App.css';\nimport \"./stylesheets/colors.scss\";\nimport \"./stylesheets/page.scss\";\n\nfunction App() {\n  return (<PopupProvider>\n    <ScaleExplorer/>\n  </PopupProvider>)\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}